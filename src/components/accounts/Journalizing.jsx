import { collection, doc, getDocs, setDoc } from "firebase/firestore";
import { useEffect, useState } from "react";
import CurrencyInput from "react-currency-input-field";
import { db } from "../../firebase-config";
import { Context } from "../context/UserContext";

const Journalizing = () => {
  const { user } = Context(); //pull user context for user ID
  const [accounts, setAccounts] = useState([]);
  const [debitAmount, setDebitAmount] = useState(null);
  const [creditAmount, setCreditAmount] = useState(null);
  const [currentDebitAccount, setCurrentDebitAccount] = useState({});
  const [currentCreditAccount, setCurrentCreditAccount] = useState({});
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState('');

  const fetchAllAccounts = async () => {
    const querySnapshot = await getDocs(collection(db, "accounts"));
    const fetchedAccounts = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
    setAccounts(fetchedAccounts);
  };

  useEffect(() => {
    fetchAllAccounts();
  }, []);


  const handleSumbmit = async (e) => {
    e.preventDefault(); //prevent page refresh on submit
    setSuccess(false); //reset sucess message on every submit
    setError(""); //reset error message
    try {
    if (creditAmount === null || debitAmount === null) {
      setError('Missing critical field!');
      return;
    }
    const journalEntry = doc(collection(db, "journalEntries")); //Creates blank document with autogenerated id

    //Sets document with account information
    await setDoc(journalEntry, {
      entryID: journalEntry.id,
      userID: user.uid,
      user: user.displayName,
      debitEntry: {
        accountName: currentDebitAccount.accountName,
        accountID: currentDebitAccount.accountID,
        Amount: debitAmount
      },
      creditEntry: {
        accountName: currentCreditAccount.accountName,
        accountID: currentCreditAccount.accountID,
        Amount: creditAmount
      }
    })
    setSuccess(true);
    e.target.reset();

    //reset field values
    setCreditAmount(null);
    setDebitAmount(null);
    setCurrentCreditAccount({});
    setCurrentDebitAccount({});
  } catch (error) {
    console.error(error.message);
      setError(
        error.message.includes("undefined")
          ? "Missing critical field!"
          : error.message
      );
    }
  };

  return (
    <div className="wrapper">
      <h1>Journalizing</h1>
      <form onSubmit={handleSumbmit}>
        <label htmlFor="debit">Debit:</label>
        <select name="debit" defaultValue="Account Name" onChange={(e) => setCurrentDebitAccount({accountID: e.target.value, accountName: e.target.options[e.target.selectedIndex].text})}>
          <option disabled>Account Name</option>
          {accounts.map((account) => (
            <option
              value={account.accountID}
              key={account.accountID}
            >
              {account.accountName}
            </option>
          ))}
        </select>
        <span>$</span>
        <CurrencyInput
          placeholder="Amount"
          name="debitAmount"
          decimalsLimit={2}
          maxLength={12}
          value={debitAmount}
          onValueChange={(value) => setDebitAmount(value)}
        />
        <br />
        <label htmlFor="credit">Credit:</label>
        <select name="credit" defaultValue="Account Name" onChange={(e) => setCurrentCreditAccount({accountID: e.target.value, accountName: e.target.options[e.target.selectedIndex].text})}>
          <option disabled>Account Name</option>
          {accounts.map((account) => (
            <option
              value={account.accountID}
              key={account.accountID}
            >
              {account.accountName}
            </option>
          ))}
        </select>
        <span>$</span>
        <CurrencyInput
          placeholder="Amount"
          name="creditAmount"
          decimalsLimit={2}
          maxLength={12}
          value={creditAmount}
          onValueChange={(value) => setCreditAmount(value)}
        />
        {error && <div style={{ color: "red"}}>{error}</div>}
        {success && <div style={{ color: "green" }}>Entry Submitted!</div>}
        <div>
          <button type="submit">Submit</button>
        </div>
      </form>
    </div>
  );
};

export default Journalizing;
