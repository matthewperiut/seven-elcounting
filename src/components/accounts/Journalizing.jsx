import { collection, doc, getDocs, query, setDoc, where } from "firebase/firestore";
import { useEffect, useState } from "react";
import CurrencyInput from "react-currency-input-field";
import { db } from "../../firebase-config";
import { Context } from "../context/UserContext";

const Journalizing = () => {
  const { user } = Context(); //pull user context for user ID
  const [accounts, setAccounts] = useState([]);
  const [debitAmounts, setDebitAmounts] = useState([]);
  const [debitsList, setDebitsList] = useState([{ amount: "" }]);
  const [creditAmounts, setCreditAmounts] = useState([]);
  const [creditsList, setCreditsList] = useState([{ amount: "" }]);
  const [currentDebitAccount, setCurrentDebitAccount] = useState({});
  const [currentCreditAccount, setCurrentCreditAccount] = useState({});
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState("");

  const fetchAllAccounts = async () => {
    const querySnapshot = await getDocs(query(collection(db, 'accounts'), where('isActivated', '==', true))); //gets snapshot of all active accounts
    const fetchedAccounts = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
    setAccounts(fetchedAccounts);
  };

  useEffect(() => {
    fetchAllAccounts();
  }, []);

  const handleSumbmit = async (e) => {
    e.preventDefault(); //prevent page refresh on submit
    setSuccess(false); //reset sucess message on every submit
    setError(""); //reset error message
    try {
      if (debitAmounts.length < 1) {
        setError('Must have a debit amount!');
        return;
      }
      if (creditAmounts.length < 1) {
        setError('Must have a credit amount!');
        return;
      }
      const journalEntry = doc(collection(db, "journalEntries")); //Creates blank document with autogenerated id

      //Sets document with account information
      await setDoc(journalEntry, {
        entryID: journalEntry.id,
        userID: user.uid,
        user: user.displayName,
        debitEntry: {
          accountName: currentDebitAccount.accountName,
          accountID: currentDebitAccount.accountID,
          debits: debitAmounts,
        },
        creditEntry: {
          accountName: currentCreditAccount.accountName,
          accountID: currentCreditAccount.accountID,
          credits: creditAmounts,
        },
      });
      setSuccess(true);
      e.target.reset();

      //reset field values
      setCreditAmounts([]);
      setDebitAmounts([]);
      setCurrentCreditAccount({});
      setCurrentDebitAccount({});
      setCreditsList([{ amount: "" }]);
      setDebitsList([{ amount: "" }])
      setCreditAmounts([]);
      setDebitAmounts([]);
    } catch (error) {
      console.error(error.message);
      setError(
        error.message.includes("account")
          ? "Amounts must be associated with an account!"
          : error.message.includes("debit")
          ? "Must enter at least one debit!"
          : error.message.includes("credit")
          ? "Must enter at least one credit!"
          : error.message

      );
    }
  };

  const handleDebitAdd = () => {
    setDebitsList([...debitsList, {amount: ""}])
  };

  const handleCreditAdd = () => {
    setCreditsList([...creditsList, {amount: ""}])
  };

  const handleDebitRemoval = (index) => {
    const list = [...debitsList];
    list.splice(index, 1);
    setDebitsList(list);

    const removeAmount = [...debitAmounts];
    removeAmount.splice(index, 1);
    setDebitAmounts(removeAmount);
  }

  const handleCreditRemoval = (index) => {
    const list = [...creditsList];
    list.splice(index, 1);
    setCreditsList(list);

    const removeAmount = [...creditAmounts];
    removeAmount.splice(index, 1);
    setDebitAmounts(removeAmount);
  }

  const handleDebitChange = (value, index) => {
    const updatedDebitAmounts = [...debitAmounts];
    updatedDebitAmounts[index] = value;
    setDebitAmounts(updatedDebitAmounts);
  };
  
  const handleCreditChange = (value, index) => {
    const updatedCreditAmounts = [...creditAmounts];
    updatedCreditAmounts[index] = value;
    setCreditAmounts(updatedCreditAmounts);
  };


  return (
    <div className="wrapper">
      <h1>Journalizing</h1>
      <form onSubmit={handleSumbmit}>
        <div className="input-form">
          <div className="label-container">
          <label htmlFor="debit">Debit:</label>
          <select
            name="debit"
            defaultValue="Account Name"
            onChange={(e) =>
              setCurrentDebitAccount({
                accountID: e.target.value,
                accountName: e.target.options[e.target.selectedIndex].text,
              })
            }
          >
            <option disabled>Account Name</option>
            {accounts.map((account) => (
              <option value={account.accountID} key={account.accountID}>
                {account.accountName}
              </option>
            ))}
          </select>
          </div>
          {debitsList.map((debit, index) => (
            <div key={index}>
              {debitsList.length > 1 && (
                <button type="button" onClick={() => handleDebitRemoval(index)} className="removetransaction-button">-</button>
              )}
              <span>$</span>
              <CurrencyInput
                value={debitAmounts[index]}
                placeholder="Amount"
                name="debitAmount"
                decimalsLimit={2}
                maxLength={12}
                onValueChange={(value) => handleDebitChange(value, index)}
              />
              {debitsList.length - 1 === index && (
                <button type="button" onClick={handleDebitAdd} className="addtransaction-button">+</button>
              )}
            </div>
          ))}
        </div>

        <div className="input-form">
          <div className="label-container">
          <label htmlFor="credit">Credit:</label>
          <select
            name="credit"
            defaultValue="Account Name"
            onChange={(e) =>
              setCurrentCreditAccount({
                accountID: e.target.value,
                accountName: e.target.options[e.target.selectedIndex].text,
              })
            }
          >
            <option disabled>Account Name</option>
            {accounts.map((account) => (
              <option value={account.accountID} key={account.accountID}>
                {account.accountName}
              </option>
            ))}
          </select>
          </div>
          {creditsList.map((credit, index) => (
            <div key={index}>
              {creditsList.length > 1 && (
                <button type="button" onClick={() => handleCreditRemoval(index)} className="removetransaction-button">-</button>
              )}
              <span>$</span>
              <CurrencyInput
                value={creditAmounts[index]}
                placeholder="Amount"
                name="creditAmount"
                decimalsLimit={2}
                maxLength={12}
                onValueChange={(value) => handleCreditChange(value, index)}
              />
              {creditsList.length - 1 === index && (
                <button type="button" onClick={handleCreditAdd} className="addtransaction-button">+</button>
              )}
            </div>
          ))}
        </div>

        {error && <div style={{ color: "red" }}>{error}</div>}
        {success && <div style={{ color: "green" }}>Entry Submitted!</div>}
        <div>
          <button type="submit">Submit</button>
        </div>
      </form>
    </div>
  );
};

export default Journalizing;
